#| code-summary: "AIC Model Formula (expand to view code)"
formula(model_AIC)
#| code-fold: true
#| code-summary: "BIC Model Formula (expand to view code)"
formula(model_BIC)
#| code-fold: true
#| code-summary: "Making a New Data Frame With Predictors and Response From Model (expand to view code)"
bic_finance <- finance_modeling |>
dplyr::select(spending_binary, follow_commitment, frugality, goal_confidence, impulsivity, resist_temptation, wellbeing)
#| code-fold: show
#| code-summary: "Extracting Predicted Probabilities (expand to view code)"
predictors <- colnames(bic_finance)
bic_finance$probabilities <- model_BIC$fitted.values
#| warning: false
#| code-fold: show
#| code-summary: "Calculating Logit Values (expand to view code)"
bic_finance <- bic_finance |>
mutate(logit = log(probabilities/(1-probabilities))) |>
dplyr::select(-probabilities) |>
gather(key = "predictors", value = "predictor.value", -logit)
#| code-fold: true
#| code-summary: "Displaying Log-Odds Against Predictors (expand to view code)"
log_plot <- ggplot(bic_finance, aes(y = logit, x = predictor.value))+
geom_point(size = 0.5, alpha = 0.5) +
geom_smooth(method = "loess") +
theme_bw() +
facet_wrap(~predictors, scales = "free_x")
log_plot
#| code-fold: show
#| code-summary: "AIC Model Variance (expand to view code)"
vif_aic <- vif(model_AIC)
vif_aic |> kable()
#| code-fold: show
#| code-summary: "BIC Model Variance (expand to view code)"
vif_bic <- vif(model_BIC)
vif_bic |> kable()
model_info <- augment(model_BIC)
model_info |>
filter(abs(.std.resid) > 3)
library(dplyr)
library(stringr)
coef_summary <- summary(model_BIC)$coefficients
# Turn into a tidy data frame
coef_df <- as.data.frame(coef_summary) |>
mutate(term = rownames(coef_summary)) |>
filter(term != "(Intercept)") |>
mutate(variable = str_remove(term, "\\d+$")) |>
group_by(variable) |>
summarise(total_effect = sum(abs(Estimate))) |>
arrange(desc(total_effect))
knitr::kable(coef_df)
get_mode <- function(x) {
ux <- na.omit(x)
ux[which.max(tabulate(match(ux, ux)))]
}
grid <- expand.grid(
impulsivity = sort(unique(finance_modeling$impulsivity)),
resist_temptation = get_mode(finance_modeling$resist_temptation),
follow_commitment = get_mode(finance_modeling$follow_commitment),
frugality = sort(unique(finance_modeling$frugality)),
goal_confidence = get_mode(finance_modeling$goal_confidence),
wellbeing = mean(finance_modeling$wellbeing, na.rm = TRUE)
)
grid$predicted_prob <- predict(model_BIC, newdata = grid, type = "response")
get_mode <- function(x) {
ux <- na.omit(x)
ux[which.max(tabulate(match(ux, ux)))]
}
grid <- expand.grid(
impulsivity = sort(unique(finance_modeling$impulsivity)),
resist_temptation = get_mode(finance_modeling$resist_temptation),
follow_commitment = get_mode(finance_modeling$follow_commitment),
frugality = sort(unique(finance_modeling$frugality)),
goal_confidence = get_mode(finance_modeling$goal_confidence),
wellbeing = mean(finance_modeling$wellbeing, na.rm = TRUE)
)
grid$predicted_prob <- predict(model_BIC, newdata = grid, type = "response")
#| message: false
#| code-fold: true
#| code-summary: "Libraries Used (expand to view code)"
library(tidyverse)
library(knitr)
library(ggformula)
library(GGally)
library(dplyr)
library(mosaic)
library(broom)
library(RColorBrewer)
library(ggplot2)
library(wacolors)
library(MASS)
library(car)
library(tidymodels)
library(naniar)
library(olsrr)
#| code-fold: true
#| code-summary: "Data Importation (expand to view code)"
finance_data <- read.csv("data/NFWBS_PUF_2016_data.csv")
#| code-fold: true
#| code-summary: "Variable Extraction (expand to view code)"
finance <- data.frame(
follow_commitment = finance_data$ACT1_1,
frugality = finance_data$FRUGALITY,
worded_probability = finance_data$SUBNUMERACY2,
percentage_skill = finance_data$SUBNUMERACY1,
goal_confidence = finance_data$GOALCONF,
admire_luxury = finance_data$MATERIALISM_1,
self_worth = finance_data$MATERIALISM_2,
impress_people = finance_data$MATERIALISM_3,
psych = finance_data$CONNECT,
distress = finance_data$DISTRESS,
impulsivity = finance_data$SELFCONTROL_1,
resist_temptation = finance_data$SELFCONTROL_2,
long_term_goals = finance_data$SELFCONTROL_3,
economic_mobility = finance_data$PEM,
spending_habit = finance_data$FS1_6,
age_group = finance_data$agecat,
wellbeing = finance_data$FWBscore)
#| code-fold: true
#| code-summary: "Renaming Age Groups (expand to view code)"
finance <- finance |>
mutate(
age_group = case_when(
age_group == 1 ~ "18-24",
age_group == 2 ~ "25-34",
age_group == 3 ~ "35-44",
age_group == 4 ~ "45-54",
age_group == 5 ~ "55-61",
age_group == 6 ~ "62-69",
age_group == 7 ~ "70-74",
age_group == 8 ~ "75+")
)
#| code-fold: true
#| code-summary: "Duplicating Data Frames (expand to view code)"
finance_analysis <- finance
finance_modeling <- finance
#| code-fold: true
#| code-summary: "Previewing Data (expand to view code)"
head(finance) |> kable()
#| code-fold: true
#| code-summary: "Counting Refusals (expand to view code)"
finance_analysis <- finance_analysis |>
mutate(
refused_questions = rowSums(across(-c(wellbeing), ~ .x == -1))
)
#| code-fold: true
#| code-summary: "Calculating the Refusal Rate (expand to view code)"
#I counted the number of (relevant) columns to avoid hard coding
num_columns <- ncol(finance_analysis)
excluded_columns <- list("wellbeing", "refused_questions")
num_excluded <- length(excluded_columns)
sum_questions <- num_columns - num_excluded
finance_analysis <- finance_analysis |>
mutate(
refusal_rate = round((refused_questions / sum_questions) * 100,
2)
)
#| code-fold: true
#| code-summary: "Identifying Columns with Refusals (expand to view code)"
contains_refusals <- finance_analysis |>
summarise(across(everything(), ~ any(. < 0, na.rm = TRUE))) |>
pivot_longer(everything(), names_to = "variable", values_to = "has_refusal")
contains_refusals |> kable()
#| code-fold: true
#| code-summary: "Renaming Refusals (expand to view code)"
finance_analysis <- finance_analysis |>
mutate(
across(-c(psych, wellbeing), ~ ifelse(. == -1, "refused", .))
)
#| code-fold: true
#| code-summary: "Calculating Minimum and Replacement Values (expand to view code)"
psych_min <- min(finance_analysis$psych)
psych_refuse <- psych_min - ((10/100) * psych_min)
wellbeing_min <- min(finance_analysis$wellbeing)
wellbeing_refuse <- wellbeing_min - ((10/100) * wellbeing_min)
wellbeing_unwritten <- wellbeing_min - ((30/100) * wellbeing_min)
#| code-fold: true
#| code-summary: "Re-encoding Refusals for Quantitative Variables (expand to view code)"
finance_analysis <- finance_analysis |>
mutate(
psych = if_else(psych == -1, psych_refuse, psych),
wellbeing = case_when(
wellbeing == -4 ~ wellbeing_unwritten,
wellbeing == -1 ~ wellbeing_refuse,
TRUE ~ wellbeing)
)
#| code-fold: true
#| code-summary: "Factoring Categorical Variables (expand to view code)"
finance_analysis <- finance_analysis |>
mutate(
spending_habit = factor(spending_habit),
follow_commitment = factor(follow_commitment),
frugality = factor(frugality),
worded_probability = factor(worded_probability),
percentage_skill = factor(percentage_skill),
goal_confidence = factor(goal_confidence),
admire_luxury = factor(admire_luxury),
self_worth = factor(self_worth),
impress_people = factor(impress_people),
distress = factor(distress),
impulsivity = factor(impulsivity),
resist_temptation = factor(resist_temptation),
long_term_goals = factor(long_term_goals),
economic_mobility = factor(economic_mobility),
age_group = factor(age_group)
)
#| code-fold: true
#| code-summary: "Saving Data Frame (expand to view code)"
saveRDS(finance_analysis, file = "shiny-apps/data/finance_analysis.rds")
#| fig-align: center
#| code-fold: true
#| code-summary: "Spending Habit Bar Chart (expand to view code)"
spending_univariate <- ggplot(finance_analysis, aes(x = spending_habit)) +
geom_bar(fill = "#412d5e", alpha = 0.9) +
labs(
title = "Distribution of Spending Habit Scores",
x = "Scores (Ranging From '1: Not At All' to '5: Completely')",
y = "Number of Respondents",
caption = "Prompt: 'I know how to keep myself from spending too much.'") +
theme_minimal() +
theme(
plot.caption = element_text(hjust = 0, size = 10),
axis.text.x = element_text(angle = 45, hjust = 1)
)
spending_univariate
#| fig-align: center
#| layout-ncol: 2
#| code-fold: true
#| code-summary: "Spending Habit & Frugality/Following Commitments Jitter Plots (expand to view code)"
frugality_bivariate <- ggplot(finance_analysis, aes(x = frugality,
y = spending_habit,
color = spending_habit)) +
geom_jitter() +
labs(
title = "Relationship between spending_habit & frugality",
x = "Frugality Score",
y = "Spending Habit Score",
subtitle = "'I know how to keep myself from spending too much' & 'If I can reuse an item I already have, there's \nno sense in buying something new'",
caption = "* 'Spending Habits' scores range from 'not at all' (1) to 'completely' (5) \n* 'Frugality' scores range from 'strongly disagree' (1) to 'strongly agree' (6)") +
theme_minimal() +
scale_color_wa_d("stuart") +
theme(
plot.caption = element_text(hjust = 0, size = 10),
plot.subtitle = element_text(size = 10),
axis.text.x = element_text(angle = 45, hjust = 1)
)
commitment_bivariate <- ggplot(finance_analysis, aes(x = follow_commitment,
y = spending_habit,
color = spending_habit)) +
geom_jitter() +
labs(
title = "Relationship between spending_habit & follow_commitment",
x = "Following Commitment Score",
y = "Spending Habit Score",
subtitle = "'I know how to keep myself from spending too much' & 'I follow-through on my financial \ncommitments to others'",
caption = "* 'Spending Habits' scores range from 'not at all' (1) to 'completely' (5) \n* 'Follow Commitment' scores range from 'not at all' (1) to 'completely' (5)") +
theme_minimal() +
scale_color_wa_d("stuart") +
theme(
plot.caption = element_text(hjust = 0, size = 10),
plot.subtitle = element_text(size = 10),
axis.text.x = element_text(angle = 45, hjust = 1)
)
frugality_bivariate
commitment_bivariate
#| fig-align: center
#| layout-ncol: 2
#| code-fold: true
#| code-summary: "Spending Habit & Impressing People/Impulsivity Jitter Plots (expand to view code)"
impress_bivariate <- ggplot(finance_analysis, aes(x = impress_people,
y = spending_habit,
color = spending_habit)) +
geom_jitter() +
labs(
title = "Relationship between spending_habit & impress_people",
x = "Impressing People Score",
y = "Spending Habit Score",
subtitle = "'I know how to keep myself from spending too much' & 'I like to own things that impress people'",
caption = "* 'Spending Habits' scores range from 'not at all' (1) to 'completely' (5) \n* 'Impress People' scores range from 'strongly disagree' (1) to 'strongly agree' (5)") +
theme_minimal() +
scale_color_wa_d("stuart") +
theme(
plot.caption = element_text(hjust = 0, size = 10),
plot.subtitle = element_text(size = 10),
axis.text.x = element_text(angle = 45, hjust = 1)
)
impulsivity_bivariate <- ggplot(finance_analysis, aes(x = impulsivity,
y = spending_habit,
color = spending_habit)) +
geom_jitter() +
labs(
title = "Relationship between spending_habit & impulsivity",
x = "Impulsivity Score",
y = "Spending Habit Score",
subtitle = "'I know how to keep myself from spending too much' & 'I often act without thinking \nthrough all the alternatives'",
caption = "* 'Spending Habits' scores range from 'not at all' (1) to 'completely' (5) \n* 'Impulsivity' scores range from 'not at all' (1) to 'completely well' (4)") +
theme_minimal() +
scale_color_wa_d("stuart") +
theme(
plot.caption = element_text(hjust = 0, size = 10),
plot.subtitle = element_text(size = 10),
axis.text.x = element_text(angle = 45, hjust = 1)
)
impress_bivariate
impulsivity_bivariate
#| code-fold: true
#| code-summary: "Calculating Highlighted Points (expand to view code)"
psych_dens <- density(finance_analysis$psych, na.rm = TRUE)
psych_r_dens <- approx(psych_dens$x, psych_dens$y, xout = psych_refuse)$y
wellbeing_dens <- density(finance_analysis$wellbeing, na.rm = TRUE)
wellbeing_r_dens <- approx(wellbeing_dens$x, wellbeing_dens$y, xout = wellbeing_refuse)$y
wellbeing_m_dens <- approx(wellbeing_dens$x, wellbeing_dens$y, xout = wellbeing_unwritten)$y
#| code-fold: true
#| code-summary: "Counting Refusals (expand to view code)"
finance_modeling <- finance_modeling |>
mutate(
refused_questions = rowSums(across(-c(wellbeing), ~ .x == -1))
)
#| code-fold: true
#| code-summary: "Re-encoding Missing Values as NA (expand to view code)"
finance_modeling <- finance_modeling |>
mutate(
across(-all_of("refused_questions"), ~ ifelse(. %in% c(-1, -4), NA, .))
)
#| code-fold: true
#| code-summary: "Imputing Missing Values in Qualitative Variables (expand to view code)"
finance_modeling <- finance_modeling |>
mutate(
across(-c("psych", "wellbeing", "refused_questions", "age_group"), impute_median)
)
#| warning: false
#| layout-ncol: 2
#| code-fold: true
#| code-summary: "Exploring Distribution of Quantitative Variables (expand to view code)"
gf_histogram(~psych, data = finance_modeling, fill = "#412d5e", alpha = 0.9) +
theme_minimal()
gf_histogram(~wellbeing, data = finance_modeling, fill = "#412d5e", alpha = 0.9) +
theme_minimal()
#| code-fold: true
#| code-summary: "Imputing Missing Values in Quantitative Variables (expand to view code)"
finance_modeling <- finance_modeling |>
mutate(
psych = impute_median(psych)
)
finance_modeling <- finance_modeling |>
mutate(
wellbeing = impute_mean(wellbeing)
)
#| code-fold: true
#| code-summary: "Creating Binary Response Variable (expand to view code)"
finance_modeling <- finance_modeling |>
mutate(
spending_binary = if_else(spending_habit >= 4, 1, 0)
)
#| code-fold: true
#| code-summary: "Factoring Categorical Variables (expand to view code)"
finance_modeling <- finance_modeling |>
mutate(
spending_habit = factor(spending_habit),
follow_commitment = factor(follow_commitment),
frugality = factor(frugality),
worded_probability = factor(worded_probability),
percentage_skill = factor(percentage_skill),
goal_confidence = factor(goal_confidence),
admire_luxury = factor(admire_luxury),
self_worth = factor(self_worth),
impress_people = factor(impress_people),
distress = factor(distress),
impulsivity = factor(impulsivity),
resist_temptation = factor(resist_temptation),
long_term_goals = factor(long_term_goals),
economic_mobility = factor(economic_mobility),
age_group = factor(age_group)
)
#| code-fold: show
#| code-summary: "Fitting General Model With All Predictors (expand to view code)"
general_model <- glm(spending_binary ~ . - spending_habit, data = finance_modeling, family = "binomial")
#| cache: true
#| code-fold: show
#| code-summary: "Stepwise Selection with AIC (expand to view code)"
model_AIC <- stepAIC(general_model, direction = "both", k = 2, trace = FALSE)
#| cache: true
#| code-fold: show
#| code-summary: "Stepwise Selection with BIC (expand to view code)"
# I needed to get the number of observations
n <- nrow(finance_modeling)
model_BIC <- stepAIC(general_model, direction = "both", k = log(n), trace = FALSE)
#| code-fold: true
#| code-summary: "AIC Model Formula (expand to view code)"
formula(model_AIC)
#| code-fold: true
#| code-summary: "BIC Model Formula (expand to view code)"
formula(model_BIC)
#| code-fold: true
#| code-summary: "Making a New Data Frame With Predictors and Response From Model (expand to view code)"
bic_finance <- finance_modeling |>
dplyr::select(spending_binary, follow_commitment, frugality, goal_confidence, impulsivity, resist_temptation, wellbeing)
#| code-fold: show
#| code-summary: "Extracting Predicted Probabilities (expand to view code)"
predictors <- colnames(bic_finance)
bic_finance$probabilities <- model_BIC$fitted.values
#| warning: false
#| code-fold: show
#| code-summary: "Calculating Logit Values (expand to view code)"
bic_finance <- bic_finance |>
mutate(logit = log(probabilities/(1-probabilities))) |>
dplyr::select(-probabilities) |>
gather(key = "predictors", value = "predictor.value", -logit)
#| code-fold: true
#| code-summary: "Displaying Log-Odds Against Predictors (expand to view code)"
log_plot <- ggplot(bic_finance, aes(y = logit, x = predictor.value))+
geom_point(size = 0.5, alpha = 0.5) +
geom_smooth(method = "loess") +
theme_bw() +
facet_wrap(~predictors, scales = "free_x")
log_plot
#| code-fold: show
#| code-summary: "AIC Model Variance (expand to view code)"
vif_aic <- vif(model_AIC)
vif_aic |> kable()
#| code-fold: show
#| code-summary: "BIC Model Variance (expand to view code)"
vif_bic <- vif(model_BIC)
vif_bic |> kable()
model_info <- augment(model_BIC)
model_info |>
filter(abs(.std.resid) > 3)
library(dplyr)
library(stringr)
coef_summary <- summary(model_BIC)$coefficients
# Turn into a tidy data frame
coef_df <- as.data.frame(coef_summary) |>
mutate(term = rownames(coef_summary)) |>
filter(term != "(Intercept)") |>
mutate(variable = str_remove(term, "\\d+$")) |>
group_by(variable) |>
summarise(total_effect = sum(abs(Estimate))) |>
arrange(desc(total_effect))
knitr::kable(coef_df)
get_mode <- function(x) {
ux <- na.omit(x)
ux[which.max(tabulate(match(ux, ux)))]
}
grid <- expand.grid(
impulsivity = sort(unique(finance_modeling$impulsivity)),
resist_temptation = get_mode(finance_modeling$resist_temptation),
follow_commitment = get_mode(finance_modeling$follow_commitment),
frugality = sort(unique(finance_modeling$frugality)),
goal_confidence = get_mode(finance_modeling$goal_confidence),
wellbeing = mean(finance_modeling$wellbeing, na.rm = TRUE)
)
grid$predicted_prob <- predict(model_BIC, newdata = grid, type = "response")
predicted_probability_plot <- ggplot(grid, aes(x = impulsivity, y = predicted_prob, color = resist_temptation, group = resist_temptation)) +
geom_line(size = 1) +
geom_point(size = 2) +
#scale_color_manual(values = green_palette) +
theme_minimal() +
theme(plot.subtitle = element_text(size = 9),
plot.caption = element_text(hjust = 0))
predicted_probability_plot
get_mode <- function(x) {
ux <- na.omit(x)
ux[which.max(tabulate(match(ux, ux)))]
}
grid <- expand.grid(
impulsivity = get_mode(finance_modeling$impulsivity),
resist_temptation = sort(uniquefinance_modeling$resist_temptation)),
get_mode <- function(x) {
ux <- na.omit(x)
ux[which.max(tabulate(match(ux, ux)))]
}
grid <- expand.grid(
impulsivity = get_mode(finance_modeling$impulsivity),
resist_temptation = sort(unique(finance_modeling$resist_temptation)),
follow_commitment = get_mode(finance_modeling$follow_commitment),
frugality = sort(unique(finance_modeling$frugality)),
goal_confidence = get_mode(finance_modeling$goal_confidence),
wellbeing = mean(finance_modeling$wellbeing, na.rm = TRUE)
)
grid$predicted_prob <- predict(model_BIC, newdata = grid, type = "response")
predicted_probability_plot <- ggplot(grid, aes(x = frugality, y = predicted_prob, color = resist_temptation, group = resist_temptation)) +
geom_line(size = 1) +
geom_point(size = 2) +
#scale_color_manual(values = green_palette) +
theme_minimal() +
theme(plot.subtitle = element_text(size = 9),
plot.caption = element_text(hjust = 0))
predicted_probability_plot
#| code-fold: true
#| code-summary: "Predicted Probabilities Plot (frugality & resisting temptation) (expand to view code)"
get_mode <- function(x) {
ux <- na.omit(x)
ux[which.max(tabulate(match(ux, ux)))]
}
grid <- expand.grid(
impulsivity = get_mode(finance_modeling$impulsivity),
resist_temptation = sort(unique(finance_modeling$resist_temptation)),
follow_commitment = get_mode(finance_modeling$follow_commitment),
frugality = sort(unique(finance_modeling$frugality)),
goal_confidence = get_mode(finance_modeling$goal_confidence),
wellbeing = mean(finance_modeling$wellbeing, na.rm = TRUE)
)
grid$predicted_prob <- predict(model_BIC, newdata = grid, type = "response")
predicted_probability_plot <- ggplot(grid, aes(x = frugality, y = predicted_prob, color = resist_temptation, group = resist_temptation)) +
geom_line(size = 1) +
geom_point(size = 2) +
theme_minimal() +
scale_color_wa_d("stuart") +
theme(plot.subtitle = element_text(size = 9),
plot.caption = element_text(hjust = 0))
predicted_probability_plot
summary(model_BIC)$coefficients
